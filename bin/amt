#!/usr/bin/ruby
#
# Managed iAMT
#   SOL (serial-over-lan)
# https://software.intel.com/sites/manageability/AMT_Implementation_and_Reference_Guide/WordDocuments/enablingthesolinterface.htm
#   KVM (keyboard-video-moust)
# https://software.intel.com/sites/manageability/AMT_Implementation_and_Reference_Guide/WordDocuments/kvmconfiguration.htm
#
# Written by Klaus KÃ¤mpf 2015
#
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), "..", "lib"))

require 'amt'
require 'uri'

def usage msg = nil
  if msg
    STDERR.puts "** Err: #{msg}"
  end
  STDERR.puts "amt [-d] [-v] <target> <command> <uri>"
  STDERR.puts "\t<target>: sol|kvm"
  STDERR.puts "\t<command>: start|status|stop"
  STDERR.puts "Example\n\tamt sol status http://user:pass@amt.host.org"
  exit (msg)?1:0
end


# ---------------------------------------------------------

usage if ARGV.empty?


debug_level = 0
target = nil
loop do
  target = ARGV.shift
  break unless target && target[0,1] == '-'
  case target[1..-1]
  when 'd'
    Amt.debug = 99 if debug_level == 0  
    Wbem.debug = 99 if debug_level == 1 # -d -d enables Wbem debugging
    debug_level += 1
  when 'h', '-help'
    usage
  when 'v', '-version'
    puts "Version #{Amt::VERSION}"
    exit 0
  else
    usage "Unknown option '#{target}'"
  end
end

cmd = ARGV.shift
usage "<command> parameter missing" unless cmd
url = ARGV.shift
usage "<uri> parameter missing" unless url

# test url
uri = nil
begin
  uri = URI.parse url
  uri.port = 16992 unless url =~ /:\d+/
  uri.path ||= "/wsman"
rescue Exception => e
  usage "<uri> parameter is not a valid URL: #{url} (#{e})"
end

# test target
klass = nil
begin
  klass = Amt.const_get(target.capitalize)
rescue Exception => e
  usage "Target '#{target.capitalize}' not available: #{e}" if Amt.debug
end
usage "<target> parameter invalid" unless klass

client = Wbem::Client.connect uri, :wsman

object = klass.new client

# test command

begin
  res = object.send cmd.to_sym
  STDERR.puts "#{target} #{cmd} failed" unless res == 0
rescue NoMethodError => e
  STDERR.puts e if Amt.debug
  usage "Command '#{cmd}' not recognized in #{object}"
rescue Exception => e
  usage "Command '#{cmd}' failed: #{e}"
end
